{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TI\\\\thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport TimerControls from \"./TimerControls\";\nimport TimerDisplay from \"./TimerDisplay\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); //sets default focus duration to 25 mins\n\n  const [focusDuration, setFocusDuration] = useState(1500); //sets default break duration\n\n  const [breakDuration, setBreakDuration] = useState(300); //sets session type\n\n  const [sessionType, setSessionType] = useState(\"focus\"); //sets if session is ongoing\n  //const [sessionInProgress, setSessionInProgress] = useState(false);\n  //sets focus time remaining\n\n  const [focusTimer, setFocusTimer] = useState(1500); //sets break time remaining\n\n  const [breakTimer, setBreakTimer] = useState(300);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (sessionType === \"focus\") {\n      setBreakTimer(breakDuration);\n      setFocusTimer(Math.max(focusTimer - 1, 0));\n\n      if (focusTimer === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setSessionType(\"break\");\n      }\n    }\n\n    if (sessionType === \"break\") {\n      setFocusTimer(focusDuration);\n      setBreakTimer(Math.max(breakTimer - 1, 0));\n\n      if (breakTimer === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        setSessionType(\"focus\");\n      }\n    }\n  }, isTimerRunning ? 1000 : null //*** TODO: Change to 1000 ms ****\n  ); //FOCUS COMPONENT\n  //decreases focus duration by 5 mins per click\n\n  const decrementFocus = () => {\n    //does not allow the focus duration to decrease lower than 5 mins\n    const newFocusDuration = focusDuration - 300;\n\n    if (newFocusDuration < 300) {\n      setFocusTimer(300);\n      setFocusDuration(300);\n    } else {\n      setFocusTimer(newFocusDuration);\n      setFocusDuration(newFocusDuration);\n    }\n  }; //increases focus duration by 5 mins per click\n\n\n  const incrementFocus = () => {\n    //does not allow the focus duration to increase above 60 mins\n    const newFocusDuration = focusDuration + 300;\n    setFocusTimer(newFocusDuration);\n\n    if (newFocusDuration > 3600) {\n      setFocusTimer(3600);\n      setFocusDuration(3600);\n    } else {\n      setFocusTimer(newFocusDuration);\n      setFocusDuration(newFocusDuration);\n    }\n  }; //BREAK COMPONENT\n  //decrease break duration by 1 min per click\n\n\n  const decrementBreak = () => {\n    const newBreakDuration = breakDuration - 60;\n    setBreakTimer(newBreakDuration); //does not allow break length to decrease below 1 min\n\n    if (newBreakDuration < 60) {\n      setBreakTimer(60);\n      setBreakDuration(60);\n    } else {\n      setBreakTimer(newBreakDuration);\n      setBreakDuration(newBreakDuration);\n    }\n  }; //increase break duration by 1 min per click\n\n\n  const incrementBreak = () => {\n    const newBreakDuration = breakDuration + 60;\n    setBreakTimer(newBreakDuration); //does not allow break length to increase above 15 mins\n\n    if (newBreakDuration > 900) {\n      setBreakTimer(900);\n      setBreakDuration(900);\n    } else {\n      setBreakTimer(newBreakDuration);\n      setBreakDuration(newBreakDuration);\n    }\n  }; //Formats time in seconds to minutes:seconds\n\n\n  function secondsToDuration(givenSeconds) {\n    let minutes = Math.floor(givenSeconds % 3600 / 60).toString().padStart(2, \"0\");\n    let seconds = Math.round(givenSeconds % 60).toString().padStart(2, \"0\");\n\n    if (givenSeconds === 3600) {\n      minutes = `60`;\n      seconds = `00`;\n    }\n\n    return `${minutes}:${seconds}`;\n  } //TIMER\n  //toggle play/pause button\n\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  } //stop timer & reset onClick\n\n\n  function stopTimer() {\n    setIsTimerRunning(false);\n    setSessionType(\"focus\");\n    setFocusTimer(focusDuration);\n    setBreakTimer(breakDuration);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    secondsToDuration: secondsToDuration,\n    focusDuration: focusDuration,\n    decrementFocus: decrementFocus,\n    incrementFocus: incrementFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    secondsToDuration: secondsToDuration,\n    breakDuration: breakDuration,\n    decrementBreak: decrementBreak,\n    incrementBreak: incrementBreak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TimerControls, {\n    classNames: classNames,\n    playPause: playPause,\n    stopTimer: stopTimer,\n    isTimerRunning: isTimerRunning,\n    useInterval: useInterval,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TimerDisplay, {\n    isTimerRunning: isTimerRunning,\n    sessionType: sessionType,\n    secondsToDuration: secondsToDuration,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusTimer: focusTimer,\n    breakTimer: breakTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/TI/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","Focus","Break","TimerControls","TimerDisplay","Pomodoro","isTimerRunning","setIsTimerRunning","focusDuration","setFocusDuration","breakDuration","setBreakDuration","sessionType","setSessionType","focusTimer","setFocusTimer","breakTimer","setBreakTimer","Math","max","Audio","play","decrementFocus","newFocusDuration","incrementFocus","decrementBreak","newBreakDuration","incrementBreak","secondsToDuration","givenSeconds","minutes","floor","toString","padStart","seconds","round","playPause","prevState","stopTimer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,KAAD,CAApD,CAFkB,CAGlB;;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,IAAD,CAAlD,CAJkB,CAKlB;;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,GAAD,CAAlD,CANkB,CAOlB;;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,OAAD,CAA9C,CARkB,CASlB;AACA;AACA;;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,IAAD,CAA5C,CAZkB,CAalB;;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,GAAD,CAA5C;AAEAE,EAAAA,WAAW,CACT,MAAM;AACJ;AAEA,QAAIY,WAAW,KAAK,OAApB,EAA6B;AAC3BK,MAAAA,aAAa,CAACP,aAAD,CAAb;AACAK,MAAAA,aAAa,CAACG,IAAI,CAACC,GAAL,CAASL,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAD,CAAb;;AACA,UAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,YAAIM,KAAJ,CAAW,8CAAX,EAA0DC,IAA1D;AACAR,QAAAA,cAAc,CAAC,OAAD,CAAd;AACD;AACF;;AACD,QAAID,WAAW,KAAK,OAApB,EAA6B;AAC3BG,MAAAA,aAAa,CAACP,aAAD,CAAb;AACAS,MAAAA,aAAa,CAACC,IAAI,CAACC,GAAL,CAASH,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAD,CAAb;;AACA,UAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,YAAII,KAAJ,CAAW,8CAAX,EAA0DC,IAA1D;AACAR,QAAAA,cAAc,CAAC,OAAD,CAAd;AACD;AACF;AACF,GApBQ,EAsBTP,cAAc,GAAG,IAAH,GAAU,IAtBf,CAsBoB;AAtBpB,GAAX,CAhBkB,CAyClB;AACA;;AACA,QAAMgB,cAAc,GAAG,MAAM;AAC3B;AACA,UAAMC,gBAAgB,GAAGf,aAAa,GAAG,GAAzC;;AACA,QAAIe,gBAAgB,GAAG,GAAvB,EAA4B;AAC1BR,MAAAA,aAAa,CAAC,GAAD,CAAb;AACAN,MAAAA,gBAAgB,CAAC,GAAD,CAAhB;AACD,KAHD,MAGO;AACLM,MAAAA,aAAa,CAACQ,gBAAD,CAAb;AACAd,MAAAA,gBAAgB,CAACc,gBAAD,CAAhB;AACD;AACF,GAVD,CA3CkB,CAsDlB;;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3B;AACA,UAAMD,gBAAgB,GAAGf,aAAa,GAAG,GAAzC;AACAO,IAAAA,aAAa,CAACQ,gBAAD,CAAb;;AACA,QAAIA,gBAAgB,GAAG,IAAvB,EAA6B;AAC3BR,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAN,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAHD,MAGO;AACLM,MAAAA,aAAa,CAACQ,gBAAD,CAAb;AACAd,MAAAA,gBAAgB,CAACc,gBAAD,CAAhB;AACD;AACF,GAXD,CAvDkB,CAoElB;AACA;;;AACA,QAAME,cAAc,GAAG,MAAM;AAC3B,UAAMC,gBAAgB,GAAGhB,aAAa,GAAG,EAAzC;AACAO,IAAAA,aAAa,CAACS,gBAAD,CAAb,CAF2B,CAG3B;;AACA,QAAIA,gBAAgB,GAAG,EAAvB,EAA2B;AACzBT,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAN,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,KAHD,MAGO;AACLM,MAAAA,aAAa,CAACS,gBAAD,CAAb;AACAf,MAAAA,gBAAgB,CAACe,gBAAD,CAAhB;AACD;AACF,GAXD,CAtEkB,CAmFlB;;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMD,gBAAgB,GAAGhB,aAAa,GAAG,EAAzC;AACAO,IAAAA,aAAa,CAACS,gBAAD,CAAb,CAF2B,CAG3B;;AACA,QAAIA,gBAAgB,GAAG,GAAvB,EAA4B;AAC1BT,MAAAA,aAAa,CAAC,GAAD,CAAb;AACAN,MAAAA,gBAAgB,CAAC,GAAD,CAAhB;AACD,KAHD,MAGO;AACLM,MAAAA,aAAa,CAACS,gBAAD,CAAb;AACAf,MAAAA,gBAAgB,CAACe,gBAAD,CAAhB;AACD;AACF,GAXD,CApFkB,CAiGlB;;;AACA,WAASE,iBAAT,CAA2BC,YAA3B,EAAyC;AACvC,QAAIC,OAAO,GAAGZ,IAAI,CAACa,KAAL,CAAYF,YAAY,GAAG,IAAhB,GAAwB,EAAnC,EACXG,QADW,GAEXC,QAFW,CAEF,CAFE,EAEC,GAFD,CAAd;AAGA,QAAIC,OAAO,GAAGhB,IAAI,CAACiB,KAAL,CAAWN,YAAY,GAAG,EAA1B,EACXG,QADW,GAEXC,QAFW,CAEF,CAFE,EAEC,GAFD,CAAd;;AAGA,QAAIJ,YAAY,KAAK,IAArB,EAA2B;AACzBC,MAAAA,OAAO,GAAI,IAAX;AACAI,MAAAA,OAAO,GAAI,IAAX;AACD;;AACD,WAAQ,GAAEJ,OAAQ,IAAGI,OAAQ,EAA7B;AACD,GA9GiB,CAgHlB;AAEA;;;AACA,WAASE,SAAT,GAAqB;AACnB7B,IAAAA,iBAAiB,CAAE8B,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACD,GArHiB,CAsHlB;;;AACA,WAASC,SAAT,GAAqB;AACnB/B,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAM,IAAAA,cAAc,CAAC,OAAD,CAAd;AACAE,IAAAA,aAAa,CAACP,aAAD,CAAb;AACAS,IAAAA,aAAa,CAACP,aAAD,CAAb;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,iBAAiB,EAAEkB,iBADrB;AAEE,IAAA,aAAa,EAAEpB,aAFjB;AAGE,IAAA,cAAc,EAAEc,cAHlB;AAIE,IAAA,cAAc,EAAEE,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,KAAD;AACE,IAAA,iBAAiB,EAAEI,iBADrB;AAEE,IAAA,aAAa,EAAElB,aAFjB;AAGE,IAAA,cAAc,EAAEe,cAHlB;AAIE,IAAA,cAAc,EAAEE,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,eAeE,oBAAC,aAAD;AACE,IAAA,UAAU,EAAE5B,UADd;AAEE,IAAA,SAAS,EAAEqC,SAFb;AAGE,IAAA,SAAS,EAAEE,SAHb;AAIE,IAAA,cAAc,EAAEhC,cAJlB;AAKE,IAAA,WAAW,EAAEN,WALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,YAAD;AACE,IAAA,cAAc,EAAEM,cADlB;AAEE,IAAA,WAAW,EAAEM,WAFf;AAGE,IAAA,iBAAiB,EAAEgB,iBAHrB;AAIE,IAAA,aAAa,EAAEpB,aAJjB;AAKE,IAAA,aAAa,EAAEE,aALjB;AAME,IAAA,UAAU,EAAEI,UANd;AAOE,IAAA,UAAU,EAAEE,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAtBF,CADF;AAqCD;;AAED,eAAeX,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport TimerControls from \"./TimerControls\";\nimport TimerDisplay from \"./TimerDisplay\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  //sets default focus duration to 25 mins\n  const [focusDuration, setFocusDuration] = useState(1500);\n  //sets default break duration\n  const [breakDuration, setBreakDuration] = useState(300);\n  //sets session type\n  const [sessionType, setSessionType] = useState(\"focus\");\n  //sets if session is ongoing\n  //const [sessionInProgress, setSessionInProgress] = useState(false);\n  //sets focus time remaining\n  const [focusTimer, setFocusTimer] = useState(1500);\n  //sets break time remaining\n  const [breakTimer, setBreakTimer] = useState(300);\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n\n      if (sessionType === \"focus\") {\n        setBreakTimer(breakDuration);\n        setFocusTimer(Math.max(focusTimer - 1, 0));\n        if (focusTimer === 0) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setSessionType(\"break\");\n        }\n      }\n      if (sessionType === \"break\") {\n        setFocusTimer(focusDuration);\n        setBreakTimer(Math.max(breakTimer - 1, 0));\n        if (breakTimer === 0) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setSessionType(\"focus\");\n        }\n      }\n    },\n\n    isTimerRunning ? 1000 : null //*** TODO: Change to 1000 ms ****\n  );\n\n  //FOCUS COMPONENT\n  //decreases focus duration by 5 mins per click\n  const decrementFocus = () => {\n    //does not allow the focus duration to decrease lower than 5 mins\n    const newFocusDuration = focusDuration - 300;\n    if (newFocusDuration < 300) {\n      setFocusTimer(300);\n      setFocusDuration(300);\n    } else {\n      setFocusTimer(newFocusDuration);\n      setFocusDuration(newFocusDuration);\n    }\n  };\n  //increases focus duration by 5 mins per click\n  const incrementFocus = () => {\n    //does not allow the focus duration to increase above 60 mins\n    const newFocusDuration = focusDuration + 300;\n    setFocusTimer(newFocusDuration);\n    if (newFocusDuration > 3600) {\n      setFocusTimer(3600);\n      setFocusDuration(3600);\n    } else {\n      setFocusTimer(newFocusDuration);\n      setFocusDuration(newFocusDuration);\n    }\n  };\n\n  //BREAK COMPONENT\n  //decrease break duration by 1 min per click\n  const decrementBreak = () => {\n    const newBreakDuration = breakDuration - 60;\n    setBreakTimer(newBreakDuration);\n    //does not allow break length to decrease below 1 min\n    if (newBreakDuration < 60) {\n      setBreakTimer(60);\n      setBreakDuration(60);\n    } else {\n      setBreakTimer(newBreakDuration);\n      setBreakDuration(newBreakDuration);\n    }\n  };\n\n  //increase break duration by 1 min per click\n  const incrementBreak = () => {\n    const newBreakDuration = breakDuration + 60;\n    setBreakTimer(newBreakDuration);\n    //does not allow break length to increase above 15 mins\n    if (newBreakDuration > 900) {\n      setBreakTimer(900);\n      setBreakDuration(900);\n    } else {\n      setBreakTimer(newBreakDuration);\n      setBreakDuration(newBreakDuration);\n    }\n  };\n\n  //Formats time in seconds to minutes:seconds\n  function secondsToDuration(givenSeconds) {\n    let minutes = Math.floor((givenSeconds % 3600) / 60)\n      .toString()\n      .padStart(2, \"0\");\n    let seconds = Math.round(givenSeconds % 60)\n      .toString()\n      .padStart(2, \"0\");\n    if (givenSeconds === 3600) {\n      minutes = `60`;\n      seconds = `00`;\n    }\n    return `${minutes}:${seconds}`;\n  }\n\n  //TIMER\n\n  //toggle play/pause button\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n  //stop timer & reset onClick\n  function stopTimer() {\n    setIsTimerRunning(false);\n    setSessionType(\"focus\");\n    setFocusTimer(focusDuration);\n    setBreakTimer(breakDuration);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus\n          secondsToDuration={secondsToDuration}\n          focusDuration={focusDuration}\n          decrementFocus={decrementFocus}\n          incrementFocus={incrementFocus}\n        />\n        <Break\n          secondsToDuration={secondsToDuration}\n          breakDuration={breakDuration}\n          decrementBreak={decrementBreak}\n          incrementBreak={incrementBreak}\n        />\n      </div>\n      <TimerControls\n        classNames={classNames}\n        playPause={playPause}\n        stopTimer={stopTimer}\n        isTimerRunning={isTimerRunning}\n        useInterval={useInterval}\n      />\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <TimerDisplay\n          isTimerRunning={isTimerRunning}\n          sessionType={sessionType}\n          secondsToDuration={secondsToDuration}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n          focusTimer={focusTimer}\n          breakTimer={breakTimer}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}