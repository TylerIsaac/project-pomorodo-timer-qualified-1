{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TI\\\\thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Status from \"./Status.js\";\nimport Duration from \"./Duration\";\nimport TimerControls from \"./TimerControls.js\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const focusMinus = () => {\n    setFocusDuration(focusDuration - 5);\n  };\n\n  const focusPlus = () => {\n    setFocusDuration(focusDuration + 5);\n  };\n\n  const breakMinus = () => {\n    setBreakDuration(breakDuration - 1);\n  };\n\n  const breakPlus = () => {\n    setBreakDuration(breakDuration + 1);\n  };\n\n  const handleStop = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Duration, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    breakMinus: breakMinus,\n    breakPlus: breakPlus,\n    focusMinus: focusMinus,\n    focusPlus: focusPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(TimerControls, {\n    session: session,\n    isTimerRunning: isTimerRunning,\n    handleStop: handleStop,\n    playPause: playPause,\n    classNames: classNames,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Status, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/TI/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","Status","Duration","TimerControls","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","focusMinus","focusPlus","breakMinus","breakPlus","handleStop","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Status from \"./Status.js\";\nimport Duration from \"./Duration\";\nimport TimerControls from \"./TimerControls.js\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n\tconst timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n\treturn {\n\t\t...prevState,\n\t\ttimeRemaining,\n\t};\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n\t/**\n\t * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n\t */\n\treturn (currentSession) => {\n\t\tif (currentSession.label === \"Focusing\") {\n\t\t\treturn {\n\t\t\t\tlabel: \"On Break\",\n\t\t\t\ttimeRemaining: breakDuration * 60,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tlabel: \"Focusing\",\n\t\t\ttimeRemaining: focusDuration * 60,\n\t\t};\n\t};\n}\n\nfunction Pomodoro() {\n\t// Timer starts out paused\n\tconst [isTimerRunning, setIsTimerRunning] = useState(false);\n\t// The current session - null where there is no session running\n\tconst [session, setSession] = useState(null);\n\n\t// ToDo: Allow the user to adjust the focus and break duration.\n\tconst [focusDuration, setFocusDuration] = useState(25);\n\tconst [breakDuration, setBreakDuration] = useState(5);\n\n  const focusMinus = () => {\n    setFocusDuration( focusDuration - 5);\n\t};\n\n\tconst focusPlus = () => {\n\t\tsetFocusDuration(focusDuration + 5);\n\t};\n\n\tconst breakMinus = () => {\n\t\tsetBreakDuration( breakDuration - 1);\n\t};\n\n\tconst breakPlus = () => {\n    setBreakDuration( breakDuration + 1);\n\t};\n\n\tconst handleStop = () => {\n\t\tsetSession(null);\n\t\tsetIsTimerRunning(false);\n\t};\n\n\t/**\n\t * Custom hook that invokes the callback function every second\n\t *\n\t * NOTE: You will not need to make changes to the callback function\n\t */\n\tuseInterval(\n\t\t() => {\n\t\t\tif (session.timeRemaining === 0) {\n\t\t\t\tnew Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n\t\t\t\treturn setSession(nextSession(focusDuration, breakDuration));\n\t\t\t}\n\t\t\treturn setSession(nextTick);\n\t\t},\n\t\tisTimerRunning ? 1000 : null\n\t);\n\n\t/**\n\t * Called whenever the play/pause button is clicked.\n\t */\n\tfunction playPause() {\n\t\tsetIsTimerRunning((prevState) => {\n\t\t\tconst nextState = !prevState;\n\t\t\tif (nextState) {\n\t\t\t\tsetSession((prevStateSession) => {\n\t\t\t\t\t// If the timer is starting and the previous session is null,\n\t\t\t\t\t// start a focusing session.\n\t\t\t\t\tif (prevStateSession === null) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabel: \"Focusing\",\n\t\t\t\t\t\t\ttimeRemaining: focusDuration * 60,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn prevStateSession;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn nextState;\n\t\t});\n\t}\n\n\t\n\n\n\n\treturn (\n\t\t<div className=\"pomodoro\">\n\t\t\t<Duration\n\t\t\t\tsession={session}\n\t\t\t\tfocusDuration={focusDuration}\n\t\t\t\tbreakDuration={breakDuration}\n\t\t\t\tbreakMinus={breakMinus}\n\t\t\t\tbreakPlus={breakPlus}\n\t\t\t\tfocusMinus={focusMinus}\n\t\t\t\tfocusPlus={focusPlus}\n\t\t\t/>\n\t\t\t<TimerControls\n\t\t\t\tsession={session}\n\t\t\t\tisTimerRunning={isTimerRunning}\n\t\t\t\thandleStop={handleStop}\n       \t\t\tplayPause={playPause}\n        \t\tclassNames={classNames}\n\t\t\t/>\n\t\t\t<Status\n\t\t\t\tsession={session}\n\t\t\t\tfocusDuration={focusDuration}\n\t\t\t\tbreakDuration={breakDuration}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}